#!/usr/bin/bash -l

set -x

<%

# Set our working directory.
working_dir = Pathname.new(context.working_dir)

# Ensure that code-server always starts up in either a user defined directory or the home directory.
if ! working_dir.exist?
    working_dir = Pathname.new(ENV['HOME'])
elsif working_dir.file?
    working_dir = working_dir.parent
end
%>

if [[ -e $HOME/.local ]];  then
  mkdir -p $HOME/work/.local
  ln -s $HOME/work/.local $HOME/.local
fi

CODE_SERVER_DATAROOT="$HOME/.local/share/code-server"
mkdir -p "$CODE_SERVER_DATAROOT/extensions"

CODE_SERVER_CONFIG=${PWD}/config.yaml
cat >$CODE_SERVER_CONFIG <<EOF
bind-addr: 127.0.0.1:${port}
#auth: password
auth: none
#password: $password
cert: false
EOF

# Print compute node.
echo "$(date): Running on compute node ${compute_node}:$port"

CPP_FILE="<%= working_dir.to_s %>/.vscode/c_cpp_properties.json"

if [[ -f "$CPP_FILE" ]]; then
    CPP_DIR="${TMPDIR:=/tmp/$USER}/cpp-vscode"
    mkdir -p "$CPP_DIR"
    chmod 700 "$CPP_DIR"

    # if the file is empty, let's initialize it
    [ -s "$CPP_FILE" ] || echo '{"configurations": [{ "name": "Linux", "browse": { "databaseFilename": null }}], "version": 4}' > "$CPP_FILE"

    jq --arg dbfile "$CPP_DIR/cpp-vscode.db" \
      '.configurations[0].browse.databaseFilename = $dbfile' \
      "$CPP_FILE" > "$CPP_FILE".new

    mv "$CPP_FILE".new "$CPP_FILE"
  fi

if [[ -d /fast ]]; then
    BINDS=/data,/fast,${SERVER_DATA_DIR}/var/lib:/var/lib/rstudio-server,${SERVER_DATA_DIR}/var/run:/var/run/rstudio-server
else
    BINDS=/data,${SERVER_DATA_DIR}/var/lib:/var/lib/rstudio-server,${SERVER_DATA_DIR}/var/run:/var/run/rstudio-server
fi

#
# Start Code Server.
#
echo "$(date): Started code-server"
echo ""

singularity run \
   --no-home -B "$BINDS" \
  "$CODESERVER_SERVER_IMAGE" \
      --bind-addr="0.0.0.0:${port}" \
      --disable-telemetry \
      --disable-update-check \
      --user-data-dir="$CODE_SERVER_DATAROOT" \
      --config="$CODE_SERVER_CONFIG" \
      --log debug \
      "<%= working_dir.to_s %>"
